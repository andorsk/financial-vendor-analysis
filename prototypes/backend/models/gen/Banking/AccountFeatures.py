# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Banking

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class AccountFeatures(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AccountFeatures()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAccountFeatures(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AccountFeatures
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # AccountFeatures
    def Feature(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AccountFeatures
    def Pros(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AccountFeatures
    def Cons(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AccountFeatures
    def GoodFor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AccountFeatures
    def MonthlyFee(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # AccountFeatures
    def Invoicing(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # AccountFeatures
    def Budgeting(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # AccountFeatures
    def Payments(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # AccountFeatures
    def HiddenFees(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # AccountFeatures
    def ApplicationSpeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # AccountFeatures
    def AtmSupport(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # AccountFeatures
    def FreeTransfers(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # AccountFeatures
    def FdicInsured(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # AccountFeatures
    def Checks(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # AccountFeatures
    def Wires(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # AccountFeatures
    def RewardsProgram(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # AccountFeatures
    def InsuredAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # AccountFeatures
    def Encrypted(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # AccountFeatures
    def VirtualCard(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # AccountFeatures
    def PhysicalCard(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # AccountFeatures
    def Integrations(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # AccountFeatures
    def IntegrationScore(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # AccountFeatures
    def AtmFees(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # AccountFeatures
    def TrustPilotScore(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # AccountFeatures
    def IosAppScore(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # AccountFeatures
    def IosApp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # AccountFeatures
    def IosNumberOfRatings(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # AccountFeatures
    def AndroidApp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # AccountFeatures
    def AndroidAppScore(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # AccountFeatures
    def AndroidAppDownload(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # AccountFeatures
    def AndroidNumberOfRatings(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # AccountFeatures
    def OsxApp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # AccountFeatures
    def WebApp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # AccountFeatures
    def WindowsApp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # AccountFeatures
    def LinuxApp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # AccountFeatures
    def OpenSource(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # AccountFeatures
    def OfflineSupport(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # AccountFeatures
    def Pwa(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # AccountFeatures
    def NerdWalletScore(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # AccountFeatures
    def Linkedin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # AccountFeatures
    def Twitter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # AccountFeatures
    def Instagram(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # AccountFeatures
    def Facebook(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # AccountFeatures
    def CommunitySize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # AccountFeatures
    def SupportScore(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # AccountFeatures
    def Headquarters(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AccountFeatures
    def PhysicalBranchPresenceScore(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # AccountFeatures
    def DepositLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # AccountFeatures
    def TransactionLimits(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # AccountFeatures
    def Zelle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # AccountFeatures
    def EaseOfSetup(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # AccountFeatures
    def BankReliability(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # AccountFeatures
    def DedicatedBusinessManager(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # AccountFeatures
    def WireTransfers(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # AccountFeatures
    def AccessibilityScore(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # AccountFeatures
    def SignupBenefits(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(114))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # AccountFeatures
    def OverdraftProtection(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(116))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # AccountFeatures
    def AtmPresenceScore(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(118))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def AccountFeaturesStart(builder):
    builder.StartObject(58)

def Start(builder):
    AccountFeaturesStart(builder)

def AccountFeaturesAddFeature(builder, feature):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(feature), 0)

def AddFeature(builder, feature):
    AccountFeaturesAddFeature(builder, feature)

def AccountFeaturesAddPros(builder, pros):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(pros), 0)

def AddPros(builder, pros):
    AccountFeaturesAddPros(builder, pros)

def AccountFeaturesAddCons(builder, cons):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(cons), 0)

def AddCons(builder, cons):
    AccountFeaturesAddCons(builder, cons)

def AccountFeaturesAddGoodFor(builder, goodFor):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(goodFor), 0)

def AddGoodFor(builder, goodFor):
    AccountFeaturesAddGoodFor(builder, goodFor)

def AccountFeaturesAddMonthlyFee(builder, monthlyFee):
    builder.PrependFloat32Slot(4, monthlyFee, 0.0)

def AddMonthlyFee(builder, monthlyFee):
    AccountFeaturesAddMonthlyFee(builder, monthlyFee)

def AccountFeaturesAddInvoicing(builder, invoicing):
    builder.PrependBoolSlot(5, invoicing, 0)

def AddInvoicing(builder, invoicing):
    AccountFeaturesAddInvoicing(builder, invoicing)

def AccountFeaturesAddBudgeting(builder, budgeting):
    builder.PrependBoolSlot(6, budgeting, 0)

def AddBudgeting(builder, budgeting):
    AccountFeaturesAddBudgeting(builder, budgeting)

def AccountFeaturesAddPayments(builder, payments):
    builder.PrependBoolSlot(7, payments, 0)

def AddPayments(builder, payments):
    AccountFeaturesAddPayments(builder, payments)

def AccountFeaturesAddHiddenFees(builder, hiddenFees):
    builder.PrependBoolSlot(8, hiddenFees, 0)

def AddHiddenFees(builder, hiddenFees):
    AccountFeaturesAddHiddenFees(builder, hiddenFees)

def AccountFeaturesAddApplicationSpeed(builder, applicationSpeed):
    builder.PrependFloat32Slot(9, applicationSpeed, 0.0)

def AddApplicationSpeed(builder, applicationSpeed):
    AccountFeaturesAddApplicationSpeed(builder, applicationSpeed)

def AccountFeaturesAddAtmSupport(builder, atmSupport):
    builder.PrependBoolSlot(10, atmSupport, 0)

def AddAtmSupport(builder, atmSupport):
    AccountFeaturesAddAtmSupport(builder, atmSupport)

def AccountFeaturesAddFreeTransfers(builder, freeTransfers):
    builder.PrependBoolSlot(11, freeTransfers, 0)

def AddFreeTransfers(builder, freeTransfers):
    AccountFeaturesAddFreeTransfers(builder, freeTransfers)

def AccountFeaturesAddFdicInsured(builder, fdicInsured):
    builder.PrependBoolSlot(12, fdicInsured, 0)

def AddFdicInsured(builder, fdicInsured):
    AccountFeaturesAddFdicInsured(builder, fdicInsured)

def AccountFeaturesAddChecks(builder, checks):
    builder.PrependBoolSlot(13, checks, 0)

def AddChecks(builder, checks):
    AccountFeaturesAddChecks(builder, checks)

def AccountFeaturesAddWires(builder, wires):
    builder.PrependBoolSlot(14, wires, 0)

def AddWires(builder, wires):
    AccountFeaturesAddWires(builder, wires)

def AccountFeaturesAddRewardsProgram(builder, rewardsProgram):
    builder.PrependBoolSlot(15, rewardsProgram, 0)

def AddRewardsProgram(builder, rewardsProgram):
    AccountFeaturesAddRewardsProgram(builder, rewardsProgram)

def AccountFeaturesAddInsuredAmount(builder, insuredAmount):
    builder.PrependFloat32Slot(16, insuredAmount, 0.0)

def AddInsuredAmount(builder, insuredAmount):
    AccountFeaturesAddInsuredAmount(builder, insuredAmount)

def AccountFeaturesAddEncrypted(builder, encrypted):
    builder.PrependBoolSlot(17, encrypted, 0)

def AddEncrypted(builder, encrypted):
    AccountFeaturesAddEncrypted(builder, encrypted)

def AccountFeaturesAddVirtualCard(builder, virtualCard):
    builder.PrependBoolSlot(18, virtualCard, 0)

def AddVirtualCard(builder, virtualCard):
    AccountFeaturesAddVirtualCard(builder, virtualCard)

def AccountFeaturesAddPhysicalCard(builder, physicalCard):
    builder.PrependBoolSlot(19, physicalCard, 0)

def AddPhysicalCard(builder, physicalCard):
    AccountFeaturesAddPhysicalCard(builder, physicalCard)

def AccountFeaturesAddIntegrations(builder, integrations):
    builder.PrependBoolSlot(20, integrations, 0)

def AddIntegrations(builder, integrations):
    AccountFeaturesAddIntegrations(builder, integrations)

def AccountFeaturesAddIntegrationScore(builder, integrationScore):
    builder.PrependFloat32Slot(21, integrationScore, 0.0)

def AddIntegrationScore(builder, integrationScore):
    AccountFeaturesAddIntegrationScore(builder, integrationScore)

def AccountFeaturesAddAtmFees(builder, atmFees):
    builder.PrependFloat32Slot(22, atmFees, 0.0)

def AddAtmFees(builder, atmFees):
    AccountFeaturesAddAtmFees(builder, atmFees)

def AccountFeaturesAddTrustPilotScore(builder, trustPilotScore):
    builder.PrependFloat32Slot(23, trustPilotScore, 0.0)

def AddTrustPilotScore(builder, trustPilotScore):
    AccountFeaturesAddTrustPilotScore(builder, trustPilotScore)

def AccountFeaturesAddIosAppScore(builder, iosAppScore):
    builder.PrependFloat32Slot(24, iosAppScore, 0.0)

def AddIosAppScore(builder, iosAppScore):
    AccountFeaturesAddIosAppScore(builder, iosAppScore)

def AccountFeaturesAddIosApp(builder, iosApp):
    builder.PrependBoolSlot(25, iosApp, 0)

def AddIosApp(builder, iosApp):
    AccountFeaturesAddIosApp(builder, iosApp)

def AccountFeaturesAddIosNumberOfRatings(builder, iosNumberOfRatings):
    builder.PrependInt32Slot(26, iosNumberOfRatings, 0)

def AddIosNumberOfRatings(builder, iosNumberOfRatings):
    AccountFeaturesAddIosNumberOfRatings(builder, iosNumberOfRatings)

def AccountFeaturesAddAndroidApp(builder, androidApp):
    builder.PrependBoolSlot(27, androidApp, 0)

def AddAndroidApp(builder, androidApp):
    AccountFeaturesAddAndroidApp(builder, androidApp)

def AccountFeaturesAddAndroidAppScore(builder, androidAppScore):
    builder.PrependFloat32Slot(28, androidAppScore, 0.0)

def AddAndroidAppScore(builder, androidAppScore):
    AccountFeaturesAddAndroidAppScore(builder, androidAppScore)

def AccountFeaturesAddAndroidAppDownload(builder, androidAppDownload):
    builder.PrependInt32Slot(29, androidAppDownload, 0)

def AddAndroidAppDownload(builder, androidAppDownload):
    AccountFeaturesAddAndroidAppDownload(builder, androidAppDownload)

def AccountFeaturesAddAndroidNumberOfRatings(builder, androidNumberOfRatings):
    builder.PrependInt32Slot(30, androidNumberOfRatings, 0)

def AddAndroidNumberOfRatings(builder, androidNumberOfRatings):
    AccountFeaturesAddAndroidNumberOfRatings(builder, androidNumberOfRatings)

def AccountFeaturesAddOsxApp(builder, osxApp):
    builder.PrependBoolSlot(31, osxApp, 0)

def AddOsxApp(builder, osxApp):
    AccountFeaturesAddOsxApp(builder, osxApp)

def AccountFeaturesAddWebApp(builder, webApp):
    builder.PrependBoolSlot(32, webApp, 0)

def AddWebApp(builder, webApp):
    AccountFeaturesAddWebApp(builder, webApp)

def AccountFeaturesAddWindowsApp(builder, windowsApp):
    builder.PrependBoolSlot(33, windowsApp, 0)

def AddWindowsApp(builder, windowsApp):
    AccountFeaturesAddWindowsApp(builder, windowsApp)

def AccountFeaturesAddLinuxApp(builder, linuxApp):
    builder.PrependBoolSlot(34, linuxApp, 0)

def AddLinuxApp(builder, linuxApp):
    AccountFeaturesAddLinuxApp(builder, linuxApp)

def AccountFeaturesAddOpenSource(builder, openSource):
    builder.PrependBoolSlot(35, openSource, 0)

def AddOpenSource(builder, openSource):
    AccountFeaturesAddOpenSource(builder, openSource)

def AccountFeaturesAddOfflineSupport(builder, offlineSupport):
    builder.PrependBoolSlot(36, offlineSupport, 0)

def AddOfflineSupport(builder, offlineSupport):
    AccountFeaturesAddOfflineSupport(builder, offlineSupport)

def AccountFeaturesAddPwa(builder, pwa):
    builder.PrependBoolSlot(37, pwa, 0)

def AddPwa(builder, pwa):
    AccountFeaturesAddPwa(builder, pwa)

def AccountFeaturesAddNerdWalletScore(builder, nerdWalletScore):
    builder.PrependFloat32Slot(38, nerdWalletScore, 0.0)

def AddNerdWalletScore(builder, nerdWalletScore):
    AccountFeaturesAddNerdWalletScore(builder, nerdWalletScore)

def AccountFeaturesAddLinkedin(builder, linkedin):
    builder.PrependBoolSlot(39, linkedin, 0)

def AddLinkedin(builder, linkedin):
    AccountFeaturesAddLinkedin(builder, linkedin)

def AccountFeaturesAddTwitter(builder, twitter):
    builder.PrependBoolSlot(40, twitter, 0)

def AddTwitter(builder, twitter):
    AccountFeaturesAddTwitter(builder, twitter)

def AccountFeaturesAddInstagram(builder, instagram):
    builder.PrependBoolSlot(41, instagram, 0)

def AddInstagram(builder, instagram):
    AccountFeaturesAddInstagram(builder, instagram)

def AccountFeaturesAddFacebook(builder, facebook):
    builder.PrependBoolSlot(42, facebook, 0)

def AddFacebook(builder, facebook):
    AccountFeaturesAddFacebook(builder, facebook)

def AccountFeaturesAddCommunitySize(builder, communitySize):
    builder.PrependInt32Slot(43, communitySize, 0)

def AddCommunitySize(builder, communitySize):
    AccountFeaturesAddCommunitySize(builder, communitySize)

def AccountFeaturesAddSupportScore(builder, supportScore):
    builder.PrependFloat32Slot(44, supportScore, 0.0)

def AddSupportScore(builder, supportScore):
    AccountFeaturesAddSupportScore(builder, supportScore)

def AccountFeaturesAddHeadquarters(builder, headquarters):
    builder.PrependUOffsetTRelativeSlot(45, flatbuffers.number_types.UOffsetTFlags.py_type(headquarters), 0)

def AddHeadquarters(builder, headquarters):
    AccountFeaturesAddHeadquarters(builder, headquarters)

def AccountFeaturesAddPhysicalBranchPresenceScore(builder, physicalBranchPresenceScore):
    builder.PrependFloat32Slot(46, physicalBranchPresenceScore, 0.0)

def AddPhysicalBranchPresenceScore(builder, physicalBranchPresenceScore):
    AccountFeaturesAddPhysicalBranchPresenceScore(builder, physicalBranchPresenceScore)

def AccountFeaturesAddDepositLimit(builder, depositLimit):
    builder.PrependInt32Slot(47, depositLimit, 0)

def AddDepositLimit(builder, depositLimit):
    AccountFeaturesAddDepositLimit(builder, depositLimit)

def AccountFeaturesAddTransactionLimits(builder, transactionLimits):
    builder.PrependInt32Slot(48, transactionLimits, 0)

def AddTransactionLimits(builder, transactionLimits):
    AccountFeaturesAddTransactionLimits(builder, transactionLimits)

def AccountFeaturesAddZelle(builder, zelle):
    builder.PrependBoolSlot(49, zelle, 0)

def AddZelle(builder, zelle):
    AccountFeaturesAddZelle(builder, zelle)

def AccountFeaturesAddEaseOfSetup(builder, easeOfSetup):
    builder.PrependFloat32Slot(50, easeOfSetup, 0.0)

def AddEaseOfSetup(builder, easeOfSetup):
    AccountFeaturesAddEaseOfSetup(builder, easeOfSetup)

def AccountFeaturesAddBankReliability(builder, bankReliability):
    builder.PrependFloat32Slot(51, bankReliability, 0.0)

def AddBankReliability(builder, bankReliability):
    AccountFeaturesAddBankReliability(builder, bankReliability)

def AccountFeaturesAddDedicatedBusinessManager(builder, dedicatedBusinessManager):
    builder.PrependBoolSlot(52, dedicatedBusinessManager, 0)

def AddDedicatedBusinessManager(builder, dedicatedBusinessManager):
    AccountFeaturesAddDedicatedBusinessManager(builder, dedicatedBusinessManager)

def AccountFeaturesAddWireTransfers(builder, wireTransfers):
    builder.PrependBoolSlot(53, wireTransfers, 0)

def AddWireTransfers(builder, wireTransfers):
    AccountFeaturesAddWireTransfers(builder, wireTransfers)

def AccountFeaturesAddAccessibilityScore(builder, accessibilityScore):
    builder.PrependFloat32Slot(54, accessibilityScore, 0.0)

def AddAccessibilityScore(builder, accessibilityScore):
    AccountFeaturesAddAccessibilityScore(builder, accessibilityScore)

def AccountFeaturesAddSignupBenefits(builder, signupBenefits):
    builder.PrependBoolSlot(55, signupBenefits, 0)

def AddSignupBenefits(builder, signupBenefits):
    AccountFeaturesAddSignupBenefits(builder, signupBenefits)

def AccountFeaturesAddOverdraftProtection(builder, overdraftProtection):
    builder.PrependBoolSlot(56, overdraftProtection, 0)

def AddOverdraftProtection(builder, overdraftProtection):
    AccountFeaturesAddOverdraftProtection(builder, overdraftProtection)

def AccountFeaturesAddAtmPresenceScore(builder, atmPresenceScore):
    builder.PrependFloat32Slot(57, atmPresenceScore, 0.0)

def AddAtmPresenceScore(builder, atmPresenceScore):
    AccountFeaturesAddAtmPresenceScore(builder, atmPresenceScore)

def AccountFeaturesEnd(builder):
    return builder.EndObject()

def End(builder):
    return AccountFeaturesEnd(builder)
